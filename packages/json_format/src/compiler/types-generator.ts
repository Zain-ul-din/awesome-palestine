/*
  Generates typescript types
  - output to ConfigType.d.ts
*/

import { TokenizerAndRendererExtension, marked } from "marked";
import { readFileSync, writeFileSync } from "fs";
import { parseHeading } from "../lib/parse-md";

const DIST_FILE_NAME = './ConfigType.d.ts';
const MD_FILE_PATH = "../../readme.md";

let headings: Array<string> = []

const headingExtension: TokenizerAndRendererExtension = {
  name: 'heading',
  renderer(token) {
    let heading = parseHeading(token)
    if(heading.length > 0) headings.push(heading);
    return ''
  }
}

marked.use({
  pedantic: false,
  gfm: true,
  breaks: true,
  extensions: [headingExtension]
})

await marked.parse(readFileSync(MD_FILE_PATH, "utf-8"))

const CONFIG_TYPE = `
/**
  Generated by compiler
  - to generate run 'yarn dev:types'
*/
type Section = ${headings.map(h => "\""+h+"\"").join(' | ')}

type ConfigType = {
  excludeSections: Array<Section>
}

export default ConfigType;
`

writeFileSync(DIST_FILE_NAME, CONFIG_TYPE);
